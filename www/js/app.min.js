"use strict";angular.module("dc.dev",[]).config(function($stateProvider){$stateProvider.state("dev",{url:"/dev","abstract":!0,templateUrl:"templates/menu.html"}).state("dev.menu",{url:"/menu",views:{mainContent:{templateUrl:"templates/developer.html"}}}).state("dev.login",{url:"/login",views:{mainContent:{templateUrl:"templates/login.html"}}}).state("dev.signup",{url:"/signup",views:{mainContent:{templateUrl:"templates/signup.html"}}}).state("dev.newdinner",{url:"/newdinner",views:{mainContent:{templateUrl:"templates/newdinner.html"}}}).state("dev.lookfor",{url:"/lookfor",views:{mainContent:{templateUrl:"templates/lookfor.html"}}}).state("dev.lookfor_filter",{url:"/lookfor_filter",views:{mainContent:{templateUrl:"templates/lookfor_filter.html"}}}).state("dev.profile",{url:"/profile",views:{mainContent:{templateUrl:"templates/profile.html"}}}).state("dev.dinner",{url:"/dinner",views:{mainContent:{templateUrl:"templates/dinner.html"}}}).state("dev.settings",{url:"/settings",views:{mainContent:{templateUrl:"templates/settings.html"}}}).state("dev.notifications",{url:"/notifications",views:{mainContent:{templateUrl:"templates/notifications.html"}}}).state("dev.dinner_list",{url:"/dinner_list",views:{mainContent:{templateUrl:"templates/dinner_list.html"}}}).state("dev.person_list",{url:"/person_list",views:{mainContent:{templateUrl:"templates/person_list.html"}}}).state("dev.person_list_interactive",{url:"/person_list_interactive",views:{mainContent:{templateUrl:"templates/person_list_interactive.html"}}}).state("dev.confirm_application",{url:"/confirm_application",views:{mainContent:{templateUrl:"templates/confirm_application.html"}}})}),angular.module("dc",["ionic","dc.controllers","dc.services","dc.filters","dc.db","dc.directives","dc.dev"]).run(function($ionicPlatform){$ionicPlatform.ready(function(){window.cordova&&window.cordova.plugins.Keyboard&&cordova.plugins.Keyboard.hideKeyboardAccessoryBar(!0),window.StatusBar&&StatusBar.styleDefault()})}).config(function($stateProvider,$urlRouterProvider){$stateProvider.state("login",{url:"/login",templateUrl:"templates/login.html",controller:"LoginCtrl"}).state("logout",{url:"/logout",onEnter:function(logout){logout()}}).state("signup",{url:"/signup",templateUrl:"templates/signup.html",controller:"SignupCtrl"}).state("app",{url:"/app","abstract":!0,templateUrl:"templates/menu.html",controller:"AppCtrl"}).state("app.settings",{url:"/settings",views:{mainContent:{templateUrl:"templates/settings.html",controller:"SettingsCtrl"}}}).state("app.newdinner",{url:"/newdinner",views:{mainContent:{templateUrl:"templates/newdinner.html",controller:"NewDinnerCtrl"}}}).state("app.lookfor",{url:"/lookfor",views:{mainContent:{templateUrl:"templates/lookfor.html"}}}).state("app.user",{url:"/user/:userId",views:{mainContent:{templateUrl:"templates/profile.html"}}}).state("app.dinner",{url:"/dinner/:dinnerId",views:{mainContent:{templateUrl:"templates/dinner.html"}}}),$urlRouterProvider.otherwise("/login")});var c=angular.module("dc.controllers",["dc.services"]);c.controller("AppCtrl",function(){console.log("Controller: app")}),c.controller("SignupCtrl",function($scope,db,$rootScope,$state,login){console.log("Controller: signup"),$scope.user={},$scope.signup=function(){console.log("signing up",$scope.user);var user;db.auth.createUser($scope.user).then(function(userId){return user={userId:userId,firstName:$scope.user.firstName,lastName:$scope.user.lastName,email:$scope.user.email},db.user.create(user)}).then(function(){console.log("signup successful"),login($scope.user)})["catch"](function(error){console.error("error signing up",error)})}}),c.controller("LoginCtrl",function($scope,login,bindPending){console.log("Controller: login"),$scope.user={},$scope.user={email:"jd@example.com",password:"asdf"},$scope.login=function(){bindPending(login($scope.user),$scope)["catch"](function(error){throw $scope.error=error.code,error})}}),c.controller("SettingsCtrl",function($scope,db,$rootScope,$state,resumeSession){console.log("Controller: settings"),resumeSession($scope),$scope.update=function(){console.log("updating user"),db.user.update($scope.user).then(function(){console.log("update successful")},function(error){console.error("update failed",error)})},$scope.mapCreated=function(map){$scope.map=map}}),c.controller("UserCtrl",function($scope,db,resumeSession,$stateParams){resumeSession($scope),db.getUserData($stateParams.userId).then(function(user){$scope.user=user}),db.getUserDinners($stateParams.userId).then(function(dinners){$scope.dinners=dinners})}),c.controller("NewDinnerCtrl",function($scope,db,$rootScope,$state,resumeSession,util){console.log("Controller: newdinner"),resumeSession($scope),$scope.dinner={isPublic:!0},$scope.user?$scope.dinner.hostedByUser=$scope.user.userId:console.warn("can't create dinner: no user "),$scope.create=function(){db.dinner.create($scope.dinner).then(function(){console.log("Dinner created",$scope.dinner),$state.go("app.lookfor")},function(error){console.error("Error creating dinner",error)})},$scope.fromNow=function(){$scope.dinner.takeawayFrom=util.now(),$scope.dinner.takeawayUntil=util.now(60)}}),c.controller("LookForDinnersCtrl",function($scope,db,resumeSession){console.log("Controller: lookfor"),resumeSession($scope),$scope.dinners=db.getDinnersSync(),$scope.getBeginTime=function(dinner){var time;return dinner.dinein&&dinner.dinein.enabled?time=dinner.dinein.time:dinner.takeaway&&dinner.takeaway.enabled&&(time=dinner.takeaway.from),time}}),c.controller("DinnerCtrl",function($scope,db,resumeSession,$stateParams){resumeSession($scope),$scope.application={count:1},$scope.dinner=db.getDinnerSync($stateParams.dinnerId),$scope.applications=db.getDinnerApplicationsSync($stateParams.dinnerId),$scope.addCount=function(count,min,max){var newCount=$scope.application.count+=count;min>newCount?newCount=min:newCount>max&&(newCount=max),$scope.application.count=newCount},$scope.apply=function(dinein){dinein?$scope.application.dinein=!0:$scope.application.dinein=!1,$scope.application.userId=$scope.user.uid,$scope.application.dinnerId=$scope.dinner.$id,db.newApplication($scope.application).then(function(application){console.log("application created:",application)},function(error){console.log("error creating application:",error)})},$scope.applicationState=function(){var state="";return angular.forEach($scope.applications,function(application){application.userId===$scope.user.uid&&(state=application.state,$scope.application=application)}),state},$scope.isHost=function(){return $scope.user&&$scope.dinner.user===$scope.user.uid},$scope.acceptApplication=function(a){a.state="accepted",db.updateApplicationState(a.$id,"accepted").then(function(){console.log("application accepted")},function(error){console.error("error accepting application",error)})},$scope.declineApplication=function(a){a.state="declined",db.updateApplicationState(a.$id,"declined").then(function(){console.log("application declined")},function(error){console.error("error declining application",error)})}}),angular.module("dc.db",["firebase"]).value("fb",new Firebase("https://dinner-collective.firebaseio.com/")).factory("db",["$rootScope","$q","$firebase","fb",function($rootScope,$q,$firebase,fb){function checkObject(obj,properties){if(!db.settings.checkArguments)return!0;if("object"!=typeof obj||void 0==obj)throw new Error(obj+" is expected to be an object.");return void 0!=properties&&Array.isArray(properties)||(properties=Array.prototype.slice.call(arguments,1)),properties.forEach(function(p){if(void 0===obj[p])throw new Error(obj.p+" is expected to be defined.")}),!0}function createError(name,message){var error=new Error(message);return error.name=name,error}var ref={root:fb},db={};return db.ref=ref,db.settings={},db.settings.checkArguments=!1,db.util={},db.util.getRefURL=function(){return fb.toString()},db.util.checkObject=checkObject,db.util.createError=createError,db.error={unauthorized:"UNAUTHORIZED",notFound:"NOT_FOUND"},db.query={},db.query.set=function(ref,data){return $q(function(resolve,reject){ref.set(data,function(error){null===error?resolve():reject(error)})})},db.query.push=function(ref,data){return $q(function(resolve,reject){var newRef=ref.push(data,function(error){null===error?resolve(newRef.key()):reject(error)})})},db.query.update=function(ref,data){return $q(function(resolve,reject){ref.update(data,function(error){null===error?resolve():reject(error)})})},db.query.get=function(ref){return $q(function(resolve,reject){ref.once("value",function(dataSnapshot){var data=dataSnapshot.val();null===data?reject(createError(db.error.notFound,"db.query.get: no data.")):resolve(data)},function(error){reject(createError(db.error.unauthorized,error.message))})})},db.auth={},db.auth.createUser=function(credentials){return $q(function(resolve,reject){fb.createUser(credentials,function(error,user){null===error?resolve(user.uid):reject(error)})})},db.auth.login=function(credentials){return $q(function(resolve,reject){fb.authWithPassword(credentials,function(error,session){null===error?resolve(session.uid,session):reject(error)})})},db.auth.logout=function(){return $q(function(resolve){fb.onAuth(function onAuth(session){null===session&&(fb.offAuth(onAuth),resolve())}),fb.unauth()})},db.auth.getCurrentSession=function(){return $q(function(resolve,reject){var session=fb.getAuth();null===session?reject():resolve(session.uid)})},ref.user=fb.child("user"),ref.notification=fb.child("notification"),db.user={},db.user.create=function(user){return user=_.cloneDeep(user),$q(function(resolve,reject){checkObject(user,"userId","firstName","lastName","email"),user.createdAt=Firebase.ServerValue.TIMESTAMP,ref.user.child(user.userId).set(user,function(error){null===error?resolve():reject(error)})})},db.user.update=function(user){return user=_.cloneDeep(user),$q(function(resolve,reject){checkObject(user,"userId"),user.updatedAt=Firebase.ServerValue.TIMESTAMP,ref.user.child(user.userId).update(user,function(error){null===error?resolve():reject(error)})})},db.user.updateSettings=function(userId,settings){return db.query.update(ref.user.child(userId).child("settings"),settings)},db.user.createImage=function(){},db.user.deleteImage=function(){},db.user.reorderImage=function(){},db.user.getFriends=function(userId){return db.query.get(ref.user.child(userId).child("friends"))},db.user.get=function(userId){return db.query.get(ref.user.child(userId))},db.user.getNotifications=function(userId){return db.query.get(ref.notification.orderByChild("forUser").equalTo(userId))},db.friendRequest={},ref.friendRequest=fb.child("friendRequest"),db.friendRequest.send=function(byUser,toUser){var friendRequest={createdAt:Firebase.ServerValue.TIMESTAMP,byUser:byUser,toUser:toUser,status:"pending"};return db.query.push(ref.friendRequest,friendRequest)},db.friendRequest.accept=function(friendRequestId){var friendRequest={updatedAt:Firebase.ServerValue.TIMESTAMP,status:"accepted"};return db.query.update(ref.friendRequest.child(friendRequestId),friendRequest)},db.friendRequest.reject=function(friendRequestId){var friendRequest={updatedAt:Firebase.ServerValue.TIMESTAMP,status:"rejected"};return db.query.update(ref.friendRequest.child(friendRequestId),friendRequest)},db.friendRequest.getIncoming=function(userId){return db.query.get(ref.friendRequest.orderByChild("toUser").equalTo(userId))},db.friendRequest.getOutgoing=function(userId){return db.query.get(ref.friendRequest.orderByChild("fromUser").equalTo(userId))},db.dinner={},ref.dinner=fb.child("dinner"),ref.application=fb.child("application"),ref.message=fb.child("message"),ref.review=fb.child("review"),db.dinner.get=function(dinnerId){return db.query.get(ref.dinner.orderByKey().equalTo(dinnerId))},db.dinner.getMessages=function(dinnerId){return db.query.get(ref.message.orderByChild("toDinner").equalTo(dinnerId))},db.dinner.getReviews=function(dinnerId){return db.query.get(ref.review.orderByChild("aboutDinner").equalTo(dinnerId))},db.dinner.createMessage=function(message){return $q(function(resolve){message=_.cloneDeep(message),checkObject(message,"createdAt","byUser","text"),message.createdAt=Firebase.ServerValue.TIMESTAMP,resolve(db.query.create(ref.message.push(message)))})},db.dinner.create=function(dinner){return $q(function(resolve){dinner=_.cloneDeep(dinner),checkObject(dinner,"hostedByUser","title","description","tags","isPublic"),dinner.createdAt=Firebase.ServerValue.TIMESTAMP,resolve(db.query.push(ref.dinner,dinner))})},db.dinner.close=function(dinnerId){var dinner={updatedAt:Firebase.ServerValue.TIMESTAMP,closedAt:Firebase.ServerValue.TIMESTAMP};return db.query.update(ref.dinner.child(dinnerId),dinner)},db.dinner.cancel=function(dinnerId){var dinner={updatedAt:Firebase.ServerValue.TIMESTAMP,cancelledAt:Firebase.ServerValue.TIMESTAMP};return db.query.update(ref.dinner.child(dinnerId),dinner)},db.dinner.acceptApplication=function(applicationId){var application={updatedAt:Firebase.ServerValue.TIMESTAMP,status:"accepted"};return db.query.update(ref.application.child(applicationId),application)},db.dinner.rejectApplication=function(applicationId){var application={updatedAt:Firebase.ServerValue.TIMESTAMP,status:"rejected"};return db.query.update(ref.application.child(applicationId),application)},db.dinner.createApplication=function(application){return $q(function(resolve){application=_.cloneDeep(application),checkObject(application,"byUser","forDinner","numSpots","isDineIn","isPublic"),application.createdAt=Firebase.ServerValue.TIMESTAMP,application.status="pending",resolve(db.query.push(ref.application,application))})},db.dinner.createReview=function(review){return $q(function(resolve){review=_.cloneDeep(review),checkObject(review,"byUser","text","aboutDinner","aboutUser"),review.createdAt=Firebase.ServerValue.TIMESTAMP,resolve(db.query.push(ref.review,review))})},db.dinner.createMessage=function(message){return $q(function(resolve){message=_.cloneDeep(message),checkObject(message,"byUser","text","toDinner"),message.createdAt=Firebase.ServerValue.TIMESTAMP,delete message.toGroup,resolve(db.query.push(ref.message,message))})},db.notification={},db.notification.create=function(notification){return function(resolve){notification=_.cloneDeep(notification),checkObject(notification,"forUser","type","text","aboutUser"),notification=Firebase.ServerValue.TIMESTAMP,resolve(db.query.create(ref.notification.push(notification)))}},db.notification.markAsRead=function(notificationId){return function(resolve){var notification={openedAt:Firebase.ServerValue.TIMESTAMP};resolve(db.query.update(notificationId,notification))}},db.createReview=function(review){return function(resolve){checkObject(review,"byUser","text"),resolve(db.query.push(ref.review,review))}},db}]),angular.module("dc.directives",[]).directive("map",function(){return{restrict:"E",scope:{onCreate:"&"},link:function($scope,$element){function initialize(){var mapOptions={center:new google.maps.LatLng(48.2085,16.373),zoom:16,mapTypeId:google.maps.MapTypeId.ROADMAP,streetViewControl:!1},map=new google.maps.Map($element[0],mapOptions);$scope.onCreate({map:map}),google.maps.event.addDomListener($element[0],"mousedown",function(e){return e.preventDefault(),!1})}"complete"===document.readyState?initialize():google.maps.event.addDomListener(window,"load",initialize)}}}).directive("pendingDots",function(){return{restrict:"EA",link:function(scope,element,attr){var dot=".",className="pending-dots",showClassName="show-pending-dots",html='<span class="'+className+'"><span class="dot-1">'+dot+'</span><span class="dot-2">'+dot+'</span><span class="dot-3">'+dot+"</span></span>";element.append(html),scope.$watch(attr.pendingDots,function(newVal){newVal?element.addClass(showClassName):element.removeClass(showClassName)})}}});var f=angular.module("dc.filters",[]);f.filter("getBeginTime",function(){return function(dinner){var time;return dinner.dinein&&dinner.dinein.enabled?time=dinner.dinein.time:dinner.takeaway&&dinner.takeaway.enabled&&(time=dinner.takeaway.from),time}});var s=angular.module("dc.services",[]);s.factory("Friends",function(){var friends=[{id:0,name:"Scruff McGruff"},{id:1,name:"G.I. Joe"},{id:2,name:"Miss Frizzle"},{id:3,name:"Ash Ketchum"}];return{all:function(){return friends},get:function(friendId){return friends[friendId]}}}),s.factory("resumeSession",function($rootScope,db,$q,$state){return function($scope){return db.auth.getCurrentSession().then(function(userId){return $rootScope.user&&$rootScope.user.uid===userId?($scope.user=$rootScope.user,$scope.user):(console.log("resuming session for user",userId),void db.user.get(userId).then(function(user){return console.log("resume successful",user),$rootScope.user=user,$scope.user=user,user}))})["catch"](function(){$state.go("app.login")})}}),s.factory("util",function(){return{now:function(offsetMins){offsetMins=offsetMins||0;var n=new Date,d=new Date(n.getTime()-6e4*n.getTimezoneOffset()+6e4*offsetMins);return d}}}),s.factory("login",function($rootScope,db,$state){return function(user){return console.log("logging in",user),db.auth.login(user).then(function(userId){console.log("getting user",userId),db.user.get(userId).then(function(user){console.log("login successful",user),$rootScope.user=user,$state.go("app.settings")})},function(error){throw console.error("error logging in",error),error})}}),s.factory("logout",function($rootScope,db,$state){return function(){console.log("logging out"),$rootScope.user={},db.auth.logout().then(function(){console.log("logout sucessful")},function(error){console.error("error logging out",error)}),$state.go("login")}}),s.factory("bindPending",function(){return function(promise,$scope,name){function done(){console.log("resetting isBusy"),$scope[name]=!1}return name||(name="pending"),console.log("setting isBusy"),$scope[name]=!0,promise.then(function(value){return done(),value},function(error){throw done(),error})}});
//# sourceMappingURL=app.min.js.map